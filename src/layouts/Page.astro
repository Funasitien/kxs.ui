---
import Head from "./Head.astro";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import { Icon } from "astro-icon/components";
import fs from "fs";

const { frontmatter } = Astro.props;

// Predefine the glob for all potential directories (e.g., `/src/pages/example/*.md`)
const allMarkdownFiles = import.meta.glob("/src/pages/**/*.mdx", {
  eager: true,
});

// Get the current page's route
let currentPath = Astro.url.pathname;
if (currentPath.endsWith("/")) {
  currentPath = currentPath.slice(0, -1);
}
const currentDir = currentPath.replace(/\/[^/]*$/, "/");
let sidebarFilePath = `src/pages${currentDir}.sidebar`;
let mdxFilePath = `/src/pages${currentPath}.mdx`;

if (frontmatter.isIndexFile) {
  sidebarFilePath = `src/pages${currentPath}/.sidebar`;
  mdxFilePath = `/src/pages${currentPath}/index.mdx`;
}

// Read the .sidebar file
let sidebarPaths = [];
const sidebarContent = fs.readFileSync(sidebarFilePath, "utf-8");
sidebarPaths = sidebarContent
  .split("\n")
  .map((line) => line.trim())
  .filter((line) => line !== ""); // Clean up lines

const currentPostIndex = sidebarPaths.findIndex(
  (element) => element === mdxFilePath
);

let nextPostUrl;
let nextButtonValue = "Suivant";
if (currentPostIndex === sidebarPaths.length - 1) {
  nextPostUrl = "/cours/";
  nextButtonValue = "Suivant (Page de cours)";
} else {
  nextPostUrl = sidebarPaths[currentPostIndex + 1]
    .replace("/src/pages/", "/")
    .replace(".mdx", "/");
}

let prevPostUrl;
let prevButtonValue = "PrÃ©cÃ©dent";
if (currentPostIndex === 0) {
  prevPostUrl = "/cours/";
  prevButtonValue = "PrÃ©cÃ©dent (Page de cours)";
} else {
  prevPostUrl = sidebarPaths[1]
    .replace("/src/pages/", "/")
    .replace(".mdx", "/");
}

// Generate posts from sidebar paths
const posts = sidebarPaths
  .map((filePath) => {
    const module = allMarkdownFiles[filePath];

    if (!module) {
      console.warn(`File not found in allMarkdownFiles: ${filePath}`);
      return null; // Skip missing files
    }

    return {
      title: (module as any).frontmatter?.title || "Untitled",
      icon: (module as any).frontmatter?.icon || "default-icon",
      url: (module as any).url || "#",
    };
  })
  .filter(Boolean); // Remove null entries
---

<Head title={frontmatter.title} description={frontmatter.description}>
  <Navbar />
  <div class="drawer lg:drawer-open">
    <input id="my-drawer-2" type="checkbox" class="drawer-toggle" />
    <div class="drawer-content max-w-screen mt-16">
      <div style="min-height: 80dvh;">
        <h1
          class="text-3xl lg:text-5xl font-bold m-2 my-4 lg:m-4 p-2 bg-primary rounded-lg flex flex-row max-w-fit text-base-100 poppins">
          <Icon name={frontmatter.icon} class="translate-y-0.5" />
          <span class="ml-1">{frontmatter.title}</span>
        </h1>
        <article
          class="mx-2 lg:mx-4 pt-4 prose lg:prose-lg prose-table:mx-auto prose-table:w-auto prose-table:border-2 prose-td:px-2 prose-th:pt-2.5 prose-th:px-4 prose-thead:bg-base-200"
          style="max-width: none;">
          <slot />
        </article>
        <div
          class="mt-4 flex justify-between text-lg lg:text-xl text-primary mx-3 lg:mx-6">
          <a href={prevPostUrl} class="text-end link link-hover"> {prevButtonValue} </a>
          <a href={nextPostUrl} class="text-end link link-hover"> {nextButtonValue} </a>
        </div>
      </div>
      <Footer />
    </div>
    <div class="drawer-side">
      <label for="my-drawer-2" aria-label="close sidebar" class="drawer-overlay"
      ></label>
      <ul class="menu bg-base-200 text-base-content min-h-full w-80 p-4 pt-16">
        <div class="mt-5 mb-32">
          {
            posts.map((post) => (
              <li class="m-1">
                <a href={post.url}>
                  <Icon name={post.icon} /> {post.title}
                </a>
              </li>
            ))
          }
        </div>
      </ul>
      <div
        class="fixed bg-transparent md:bg-base-300 rounded-xl bottom-4 left-4 p-2 w-72">
        <a
          class="btn btn-neutral justify-start mx-2 lg:mx-0"
          style="width: -webkit-fill-available;"
          href="../">
          <Icon name="mdi:keyboard-return" />
          Retour
        </a>
        <select
          data-choose-theme
          class="select select-bordered hidden lg:flex mt-2"
          style="width: -webkit-fill-available;">
          <option value="light">ðŸ’¡ Light</option>
          <option value="dark">ðŸŒ™ Dark</option>
        </select>
      </div>
    </div>
  </div>
  <button
    class="hidden top-1 right-1 absolute bg-base-200 text-base-content p-1 rounded-md">
    This button create needed css classes for the copy button
  </button>
</Head>
<script type="module">
  import mermaid from "https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs";
  mermaid.initialize({ startOnLoad: true });
</script>
<script is:inline>
  const copyButtonLabel =
    '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="white" d="M19 21H8V7h11m0-2H8a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2m-3-4H4a2 2 0 0 0-2 2v14h2V3h12z" /></svg>';
  const pasteButtonLabel =
    '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="white" d="M22 16a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2V4c0-1.11.89-2 2-2h12a2 2 0 0 1 2 2zm-6 4v2H4a2 2 0 0 1-2-2V7h2v13zm-3-6l7-7l-1.41-1.41L13 11.17L9.91 8.09L8.5 9.5z" /></svg>';
  let codeBlocks = Array.from(document.querySelectorAll("pre"));

  for (let codeBlock of codeBlocks) {
    let wrapper = document.createElement("div");
    wrapper.style.position = "relative";

    let copyButton = document.createElement("button");
    copyButton.className = "top-1 right-1 absolute p-1 rounded-md text-2xl";
    copyButton.innerHTML = copyButtonLabel;

    codeBlock.setAttribute("tabindex", "0");
    codeBlock.appendChild(copyButton);
    // wrap codebock with relative parent element
    codeBlock.parentNode.insertBefore(wrapper, codeBlock);
    wrapper.appendChild(codeBlock);

    copyButton.addEventListener("click", async () => {
      await copyCode(codeBlock, copyButton);
    });
  }

  async function copyCode(block, button) {
    let code = block.querySelector("code");
    let text = code.innerText;

    await navigator.clipboard.writeText(text);

    // visual feedback that task is completed
    button.innerHTML = pasteButtonLabel;

    setTimeout(() => {
      button.innerHTML = copyButtonLabel;
    }, 700);
  }
</script>
